{"version":3,"sources":["App.js","serviceWorker.js","index.js","dog.png"],"names":["App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","page","setState","_this2","react_default","a","createElement","className","src","dog","style","marginBottom","alt","color","es_button","type","shape","size","onClick","e","renderIdentifyDoggo","React","Component","isLocalhost","Boolean","window","location","hostname","match","register","config","navigator","URL","process","href","origin","addEventListener","swUrl","concat","fetch","then","response","contentType","headers","get","status","indexOf","serviceWorker","ready","registration","unregister","reload","registerValidSW","catch","console","log","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","startApp","ReactDOM","render","src_App_0","document","getElementById","cordova","module","exports","__webpack_require__","p"],"mappings":"gNA2CeA,2BApCb,SAAAA,IAAe,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACbC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAEKI,MAAQ,CACXC,KAAM,GAJKR,qFASbG,KAAKM,SAAS,CAAED,KAAM,qCAGd,IAAAE,EAAAP,KAEN,OAAwB,IAApBA,KAAKI,MAAMC,KAETG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,IAAKC,MAAO,CAAEC,aAAc,QAASJ,UAAU,WAAWK,IAAI,SACxER,EAAAC,EAAAC,cAAA,MAAII,MAAO,CAACG,MAAO,SAAnB,sBACAT,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAQC,KAAK,UAAUL,MAAO,CAAEC,aAAc,QAASK,MAAM,QAAQC,KAAK,QAAQC,QAAS,SAAAC,GAAC,OAAIhB,EAAKiB,oBAAoBD,KAAzH,kBACAf,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAQJ,MAAO,CAAEC,aAAc,QAASK,MAAM,QAAQC,KAAK,SAA3D,cACAb,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAQE,MAAM,QAAQC,KAAK,SAA3B,gBAMNb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAf,iBA7BQc,IAAMC,YCMlBC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAIC,SAASC,EAASC,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIC,IAAIC,IAAwBR,OAAOC,SAASQ,MACpDC,SAAWV,OAAOC,SAASS,OAIvC,OAGFV,OAAOW,iBAAiB,OAAQ,WAC9B,IAAMC,EAAK,GAAAC,OAAML,IAAN,sBAEPV,IAgEV,SAAiCc,EAAOP,GAEtCS,MAAMF,GACHG,KAAK,SAAAC,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5Cf,UAAUgB,cAAcC,MAAMR,KAAK,SAAAS,GACjCA,EAAaC,aAAaV,KAAK,WAC7Bf,OAAOC,SAASyB,aAKpBC,EAAgBf,EAAOP,KAG1BuB,MAAM,WACLC,QAAQC,IACN,mEArFAC,CAAwBnB,EAAOP,GAI/BC,UAAUgB,cAAcC,MAAMR,KAAK,WACjCc,QAAQC,IACN,gHAMJH,EAAgBf,EAAOP,MAM/B,SAASsB,EAAgBf,EAAOP,GAC9BC,UAAUgB,cACPlB,SAASQ,GACTG,KAAK,SAAAS,GACJA,EAAaQ,cAAgB,WAC3B,IAAMC,EAAmBT,EAAaU,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB1D,QACf+B,UAAUgB,cAAcc,YAI1BP,QAAQC,IACN,iHAKEzB,GAAUA,EAAOgC,UACnBhC,EAAOgC,SAASb,KAMlBK,QAAQC,IAAI,sCAGRzB,GAAUA,EAAOiC,WACnBjC,EAAOiC,UAAUd,UAO5BI,MAAM,SAAAW,GACLV,QAAQU,MAAM,4CAA6CA,KC1FjE,IAAMC,EAAW,WACbC,IAASC,OAAO/D,EAAAC,EAAAC,cAAC8D,EAAD,MAASC,SAASC,eAAe,SACjDvB,KAGAtB,OAAO8C,QACPF,SAASjC,iBAAiB,cAAe6B,GAAU,GAEnDA,wBCdJO,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.dcd83a93.chunk.js","sourcesContent":["import React from 'react';\nimport { Button } from 'antd';\nimport dog from './dog.png';\nimport './App.css';\nimport 'antd/dist/antd.css';\n\nclass App extends React.Component {\n  constructor () {\n    super()\n\n    this.state = {\n      page: 0\n    }\n  }\n\n  renderIdentifyDoggo () {\n    this.setState({ page: 1 })\n  }\n\n  render () {\n\n      if (this.state.page === 0) {\n          return (\n            <div className=\"App\">\n              <header className=\"App-header\">\n                <img src={dog} style={{ marginBottom: '10px'}} className=\"App-logo\" alt=\"logo\" />\n                <h1 style={{color: '#fff'}}>Who's Your Pupper?</h1>\n                <Button type='primary' style={{ marginBottom: '15px'}} shape='round' size='large' onClick={e => this.renderIdentifyDoggo(e)}>IDENTIFY DOGGO</Button>\n                <Button style={{ marginBottom: '15px'}} shape='round' size='large'> TAKE QUIZ</Button>\n                <Button shape='round' size='large'>MY RESULTS</Button>\n              </header>\n            </div>\n          );\n      } else {\n        return (\n          <div className=\"App\">\n            teehee\n          </div>\n        )\n      }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst startApp = () => {\n    ReactDOM.render(<App />, document.getElementById('root'));\n    serviceWorker.register();\n}\n\nif (window.cordova) {\n    document.addEventListener('deviceready', startApp, false)\n} else {\n    startApp()\n}\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n","module.exports = __webpack_public_path__ + \"static/media/dog.ca358417.png\";"],"sourceRoot":""}